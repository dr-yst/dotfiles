
# 環境変数
export LANG=ja_JP.UTF-8
case ${UID} in
0)
LANG=C
;;
esac


# 色を使用出来るようにする
autoload -Uz colors
colors

# 色の定義
# local DEFAULT=$'%{e[m%}'$
# local RED=$'%{e[1;31m%}'$
# local GREEN=$'%{e[1;32m%}'$
# local YELLOW=$'%{e[1;33m%}'$
# local BLUE=$'%{e[1;34m%}'$
# local PURPLE=$'%{e[1;35m%}'$
# local LIGHT_BLUE=$'%{e[1;36m%}'$
# local WHITE=$'%{e[1;37m%}'$

DEFAULT="%{"$'\e'"[0m%}"
GREEN="%{"$'\e'"[38;5;46m%}"
PINK="%{"$'\e'"[38;5;13m%}"
RED="%{"$'\e'"[38;5;160m%}"
BLUE="%{"$'\e'"[38;5;21m%}"
YELLOW="%{"$'\e'"[38;5;226m%}"
PURPLE="%{"$'\e'"[38;5;93m%}"



# 補完候補もLS_COLORSに合わせて色づけ。
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}


# emacs 風キーバインドにする
bindkey -e
 
# ヒストリの設定
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=100000

# 単語の区切り文字を指定する
autoload -Uz select-word-style
select-word-style default
# ここで指定した文字は単語区切りとみなされる
# / も区切りと扱うので、^W でディレクトリ１つ分を削除できる
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

########################################
# 補完

# 補完機能を有効にする
autoload -Uz compinit
compinit -u


# ^PとかのHistory検索と相性が悪い
# auto-fu.zshのためオリジナルが変更
# URLをコピペしたときに自動でエスケープ
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic


# zsh-completion
fpath=(~/.files/zsh-completions/src $fpath)

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
 
# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..
 
# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
/usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin /usr/local/bin/git/bin
 
# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'


# 補完候補を矢印キーなどで選択出来るようにする。'select=3'のように指定した場合は、補完候補が3個以上ある時に選択出来るようになる。
zstyle ':completion:*:default' menu select

# zstyleによる補完設定
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format $YELLOW'%d'$DEFAULT
zstyle ':completion:*:warnings' format $RED'No matches for:'$YELLOW' %d'$DEFAULT
zstyle ':completion:*:descriptions' format $YELLOW'completing %B%d%b'$DEFAULT
zstyle ':completion:*:corrections' format $YELLOW'%B%d '$RED'(errors: %e)%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
# グループ名に空文字列を指定すると，マッチ対象のタグ名がグループ名に使われる。
# したがって，すべての マッチ種別を別々に表示させたいなら以下のようにする
zstyle ':completion:*' group-name ''

# manの補完をセクション番号別に表示させる
zstyle ':completion:*:manuals' separate-sections true
 
# 変数の添字を補完する
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
 

########################################
# オプション
# 日本語ファイル名を表示可能にする
setopt print_eight_bit
 
# beep を無効にする
setopt no_beep
 
# フローコントロールを無効にする
setopt no_flow_control
 
# '#' 以降をコメントとして扱う
setopt interactive_comments
 
# ディレクトリ名だけでcdする
setopt auto_cd
 
# cd したら自動的にpushdする
setopt auto_pushd

# 重複したディレクトリを追加しない
setopt pushd_ignore_dups
 
# = の後はパス名として補完する
setopt magic_equal_subst
 
# 同時に起動したzshの間でヒストリを共有する
# setopt share_history
 
# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups
 
# ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_save_nodups
 
# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space
 
# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks
 
# 補完候補が複数あるときに自動的に一覧表示する
setopt auto_menu
 
# 高機能なワイルドカード展開を使用する
setopt extended_glob

# コマンドを実行するときに右プロンプトを消す。他の端末等にコピペするときに便利。
setopt transient_rprompt

# コマンドのスペルミスを指摘して予想される正しいコマンドを提示してくれる。このときのプロンプトがSPROMPT。
setopt correct

# 補完候補を表示するときに出来るだけ詰めて表示。
setopt list_packed

# 補完候補が複数ある時に、一覧表示する
setopt auto_list

#  auto_list の補完候補一覧で、ls -F のようにファイルの種別をマーク表示
setopt list_types

# 補完キー（Tab, Ctrl+I) を連打するだけで順に補完候補を自動で補完する
setopt auto_menu

#  複数のリダイレクトやパイプなど、必要に応じて tee や cat の機能が使われる
setopt multios

# {a-c} を a b c に展開する機能を使えるようにする
setopt brace_ccl

# カッコの対応などを自動的に補完する
setopt auto_param_keys

# サスペンド中のプロセスと同じコマンド名を実行した場合はリジュームする
setopt auto_resume

# ディレクトリの最後のスラッシュを自動で削除する
setopt autoremoveslash

setopt complete_in_word      # 語の途中でもカーソル位置で補完
setopt always_last_prompt    # カーソル位置は保持したままファイル名一覧を順次その場で表示
 

# シンボリックリンクは実体を追うようになる
# setopt chase_links

bindkey "^I" menu-complete   # 展開する前に補完候補を出させる(Ctrl-iで補完するようにする)

#######################
# auto-fu.zsh
# http://blog.glidenote.com/blog/2012/04/07/auto-fu.zsh/
# if [ -f ~/.emacs.d/auto-fu.zsh/auto-fu.zsh ]; then
#     source ~/.emacs.d/auto-fu.zsh/auto-fu.zsh
#     function zle-line-init () {
#         auto-fu-init
#     }
#     zle -N zle-line-init
#     zstyle ':completion:*' completer _oldlist _complete
# fi

########################################
# キーバインド
 
# ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする
# bindkey '^R' history-incremental-pattern-search-backward
 
########################################
# set aliases

alias ls='\ls -FGv'
alias ll='\ls -lhaGv'
alias la='\ls -aGv'

alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"
alias emacs="open -a Emacs.app"
alias f='finder.sh'
alias bon="open -a Xcode"

# sudo の後のコマンドでエイリアスを有効にする
alias sudo='sudo '

alias remem='du -sx / &> /dev/null & sleep 25 && kill $!'

# alias emacsapp='/Applications/MacPorts/Emacs.app/Contents/MacOS/Emacs'

alias title='~/.files/scripts/title.sh'
alias platexpdf='~/.files/platexpdf/platexpdf'


# if [ `which gcc-6` ]; then
#     alias gcc='gcc-6'
#     alias g++='g++-6'
# fi

# alias clang++='clang++-mp-3.3 -std=c++11'

alias matrix='LC_ALL=C tr -c "[:digit:]" " " < /dev/urandom | dd cbs=$COLUMNS conv=unblock | GREP_COLOR="1;32" grep --color "[^ ]"'
alias matrix2='echo -e "1"; while $t; do for i in `seq 1 30`;do r="$[($RANDOM % 2)]";h="$[($RANDOM % 4)]";if [ $h -eq 1 ]; then v="0 $r";else v="1 $r";fi;v2="$v2 $v";done;echo -e $v2;v2="";done;'

function snow(){
    ruby -e 'C=`stty size`.scan(/\d+/)[1].to_i;S=["2743".to_i(16)].pack("U*");a={};puts "\033[2J";loop{a[rand(C)]=0;a.each{|x,o|;a[x]+=1;print "\033[#{o};#{x}H \033[#{a[x]};#{x}H#{S} \033[0;0H"};$stdout.flush;sleep 0.1}'
}

function face(){
         ruby -e 'C=`stty size`.scan(/\d+/)[1].to_i;S=[*0x1F600..0x1F640];a={};puts "\033[2J";loop{a[rand(C)]=0;a.each{|x,o|;a[x]+=1;print "\033[#{o};#{x}H \033[#{a[x]};#{x}H#{S.sample.chr("utf-8")} \033[0;0H"};$stdout.flush;sleep 0.2}'
}

export EDITOR=/usr/local/bin/emacs

alias trimiPhone4='ls *.png | while read line; do convert -crop 640x920+0+40 "$line" "crop-$line"; done'
alias trimiPhone5='ls *.png | while read line; do convert -crop 640x1096+0+40 "$line" "crop-$line"; done'


#####################################
# emacsとshellでパスを共有
alias eclient="emacsclient"
function cde () {   
    EMACS_CWD=`eclient -e "
      (if (featurep 'elscreen)
          (elscreen-current-directory)
        (non-elscreen-current-directory))" | sed 's/^"\(.*\)"$/\1/'`
 
    echo "chdir to $EMACS_CWD"
    cd "$EMACS_CWD"
}
function dired () {
  eclient -e "(dired \"$PWD\")"
}

######################################
# ^を押すと上の階層へ
# http://qiita.com/items/b01536fa63d9f8fadf4f
cdup() {
if [ -z "$BUFFER" ]; then
echo
cd ..
if type precmd > /dev/null 2>&1; then
precmd
fi
local precmd_func
for precmd_func in $precmd_functions; do
$precmd_func
done
zle reset-prompt
else
zle self-insert '^'
fi
}
zle -N cdup
bindkey '\^' cdup

####################################
# C-x, C-pでコマンドをクリップボードにコピーする
# http://d.hatena.ne.jp/hiboma/20120315/1331821642
pbcopy-buffer(){
print -rn $BUFFER | pbcopy
zle -M "pbcopy: ${BUFFER}"
}
 
zle -N pbcopy-buffer
bindkey '^x^p' pbcopy-buffer

########################################
# パスの設定
PATH="${HOME}/.files/scripts:${HOME}/AFsp-v9r0/bin:/usr/local/bin:/usr/local/opt/llvm/bin:${HOME}/anaconda/bin:${PATH}"
export TEXINPUTS=~/Dropbox/ochiailab/tex/:$TEXINPUTS
export BSTINPUTS=~/Dropbox/ochiailab/tex/:$BSTINPUTS
export BIBINPUTS=~/Dropbox/ochiailab/tex/:$BIBINPUTS

export C_INCLUDE_PATH=/usr/local/include/:~/MyLib/include/:$C_INCLUDE_PATH # /opt/local/include/:
export CPLUS_INCLUDE_PATH=/usr/local/include/:~/MyLib/include/:$CPLUS_INCLUDE_PATH # /opt/local/include/:
export LIBRARY_PATH=/usr/local/lib/:~/MyLib/:$LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/local/lib/:~/MyLib/:$LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH=~/MyLib/:$DYLD_LIBRARY_PATH 

# export PYTHONPATH=/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/site-packages/:$PYTHONPATH
export PYTHONSTARTUP=~/.pythonstartup.py

# iOSのライブラリへのパス
export PLATFORM=iPhoneOS
export VERSION=9.2
export SDK=/Applications/Xcode.app/Contents/Developer/Platforms/${PLATFORM}.platform/Developer/SDKs/${PLATFORM}.sdk/System/Library/Frameworks

# Specify your defaults in this environment variable
export HOMEBREW_CASK_OPTS="--appdir=/Applications"

# source-highlightをインストールすること!!
export LESS='-R'
export LESSOPEN='| /usr/local/bin/src-hilite-lesspipe.sh  %s'

# 圧縮ファイルを簡単に開く
function extract() {
  case $1 in
    *.tar.gz|*.tgz) tar xzvf $1;;
    *.tar.xz) tar Jxvf $1;;
    *.zip) unzip $1;;
    *.lzh) lha e $1;;
    *.tar.bz2|*.tbz) tar xjvf $1;;
    *.tar.Z) tar zxvf $1;;
    *.gz) gzip -d $1;;
    *.bz2) bzip2 -dc $1;;
    *.Z) uncompress $1;;
    *.tar) tar xvf $1;;
    *.arj) unarj $1;;
  esac
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz}=extract


########################################
# # powerline-shell
# function powerline_precmd() {
#   export PS1="$(~/.emacs.d/powerline-shell/powerline-shell.py $? --shell zsh)"
# }

# function install_powerline_precmd() {
#   for s in "${precmd_functions[@]}"; do
#     if [ "$s" = "powerline_precmd" ]; then
#       return
#     fi
#   done
#   precmd_functions+=(powerline_precmd)
# }

# install_powerline_precmd

#########################################

# プロンプト
source ${HOME}/.files/zsh-prompt.zsh

# cdr, add-zsh-hook を有効にする
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
 
# cdr の設定
zstyle ':completion:*' recent-dirs-insert both
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':chpwd:*' recent-dirs-pushd yes
zstyle ':filter-select:highlight' selected fg=magenta,bg=yellow,standout
zstyle ':filter-select' case-insensitive yes

source ${HOME}/.files/zaw/zaw.zsh
bindkey '^@' zaw-cdr # C-@にバインド
bindkey '^R' zaw-history
bindkey '^X^V' zaw-git-status
bindkey '^X^W' zaw-git-files
bindkey '^X^B' zaw-git-branches
bindkey '^X^M' zaw-process
bindkey '^X^T' zaw-tmux
bindkey '^S' zaw-ack
bindkey '^X^O' zaw-applications
bindkey '^X^F' zaw-open-file
bindkey '^X^S' zaw-ssh-hosts


## create emacs env file
# perl -wle \
#     'do { print qq/(setenv "$_" "$ENV{$_}")/ if exists $ENV{$_} } for @ARGV' \
#     PATH > ~/.emacs.d/shellenv.el

ITPP_CFLAGS="itpp-config --cflags"
ITPP_LIBS="itpp-config --libs"
GSL_CONFIG="gsl-config --cflags --libs"
FFMPEG_OPTS="-lavformat -lavcodec -lavutil -lswscale -lz -lm"
SDL_CONFIG="sdl-config --cflags --libs"
GPP_OPTS="-g -Wall -Wextra -std=c++11"

# g++のコマンド省略
# 引数1個めと2個めは入力ファイル、出力ファイル
function ccc(){
    arg=("$@")
    command="g++ -O3 -g -Wall -Wextra -std=c++11 ${arg[1]} -o ${arg[2]} -lmylib"

    if [ $# -gt 2 ]; then
        for i in `seq 3 $#`
        do
            command="${command} ${arg[$i]}"
        done
    fi
    
    echo $command
    eval $command
}

function ccgsl(){
    arg=("$@")
    command="g++ -O3 -g -Wall -Wextra -std=c++11 ${arg[1]} -o ${arg[2]} -lmylib -lgsl -lgslcblas"

    if [ $# -gt 2 ]; then
        for i in `seq 3 $#`
        do
            command="${command} ${arg[$i]}"
        done
    fi
    
    echo $command
    eval $command
}

function ccitpp(){
    arg=("$@")
    command="g++ -O3 -g -Wall -Wextra -std=c++11 \`itpp-config --cflags\` -o ${arg[2]} ${arg[1]} -lmylib \`itpp-config --libs\`"

    if [ $# -gt 2 ]; then
        for i in `seq 3 $#`
        do
            command="${command} ${arg[$i]}"
        done
    fi
    
    echo $command
    eval $command
}

# ffmpeg用のコンパイル
function ccffmpeg(){
    arg=("$@")
    command="g++ ${arg[1]} -o ${arg[2]} -lavformat -lavcodec -lavutil -lswscale -lz -lm \`sdl-config --cflags --libs\` -std=c++11 -g -Wall -Wextra"

    if [ $# -gt 2 ]; then
        for i in `seq 3 $#`
        do
            command="${command} ${arg[$i]}"
        done
    fi
    
    echo $command
    eval $command
}

function ccfullopt() {
    arg=("$@")
    command="g++ \`itpp-config --cflags\` ${arg[1]} -o ${arg[2]} -lavformat -lavcodec -lavutil -lswscale -lz -lm \`sdl-config --cflags --libs\` \`itpp-config --libs\` \`pkg-config opencv3 --cflags --libs\` -lgsl -lgslcblas -std=c++11 -g -Wall -Wextra"
    
    if [ $# -gt 2 ]; then
        for i in `seq 3 $#`
        do
            command="${command} ${arg[$i]}"
        done
    fi
    
    echo $command
    eval $command
}


function clangffmpeg() {
    arg=("$@")
    command="clang++ ${arg[1]} -o ${arg[2]} -lavformat -lavcodec -lavutil -lswscale -lz -lm \`sdl-config --cflags --libs\` -std=c++11 -stdlib=libstdc++ -g -Wall -Wextra"

    if [ $# -gt 2 ]; then
        for i in `seq 3 $#`
        do
            command="${command} ${arg[$i]}"
        done
    fi
    
    echo $command
    eval $command
}


test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
eval "$(rbenv init -)"
